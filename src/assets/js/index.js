import '../css/styles.css'

// BURGER

const topNav = document.querySelector('.top-navigation');
const navToggle = document.querySelector('.nav-toggle');
const navLink = document.querySelectorAll('.nav-link');
const wrapper = document.getElementById('wrapper');
const burgerLineTop = document.querySelector('.burger-line-top');
const burgerLineBottom = document.querySelector('.burger-line-bottom');

function toggleBurger() {
  const visibility = topNav.getAttribute('data-visible');
  const isActive = visibility === 'false';
  navToggle.setAttribute('aria-expanded', isActive);
  topNav.setAttribute('data-visible', isActive);
  topNav.setAttribute('aria-expanded', isActive);
  wrapper.className = isActive ? 'wrapper inactive' : 'wrapper';
  burgerLineBottom.style.y = isActive ? '45' : '20';
  burgerLineTop.style.y = isActive ? '45' : '80';
}

wrapper.addEventListener('click', () => {
  if (topNav.getAttribute('data-visible') === 'true') toggleBurger();
});

navToggle.addEventListener('click', () => {
  toggleBurger();
});

navLink.forEach((navLink) => navLink.addEventListener('click', () => {
  toggleBurger();
}));

// CREATING OBJECT

const container = document.getElementById('projects-set');

const projects = [
  {
    id: 1,
    prName: 'Portfolio',
    description:
      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it 1960s.",
    mobileImg: 'assets/img/modal-illustration.png',
    desktopImg: 'assets/img/modal-bg-desktop.png',
    mobileImgWebP: 'assets/img/modal-illustration.webp',
    desktopImgWebP: 'assets/img/modal-bg-desktop.webp',
    technologies: ['CSS', 'JavaScript', 'HTML', 'Webpack', 'SCSS'],
    liveVersion: 'https://romans-adi.github.io/romans-portfolio/',
    source: 'https://github.com/romans-adi/romans-adi.github.io',
  },

  {
    id: 2,
    prName: 'To-Do List',
    description:
      "The Simple To Do List is a single-page application designed to help users add and remove tasks from a list. It features a class with well-defined methods and utilizes local storage to store data. The project is built using modular JavaScript and implements the latest ES6 syntax and features.",
    mobileImg: 'assets/img/screenshots/todo-phone.jpg',
    desktopImg: 'assets/img/screenshots/todo.png',
    mobileImgWebP: 'assets/img/screenshots/todo-phone.webp',
    desktopImgWebP: 'assets/img/screenshots/todo.webp',
    technologies: ['CSS', 'JavaScript', 'HTML', 'Webpack', 'Jest'],
    liveVersion: 'https://romans-adi.github.io/todo-app/',
    source: 'https://github.com/romans-adi/todo-app',
  },
  {
    id: 3,
    prName: 'Awesome Books',
    description:
      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it 1960s.",
    mobileImg: 'assets/img/screenshots/awesome-phone.jpg',
    desktopImg: 'assets/img/screenshots/awesome.png',
    mobileImgWebP: 'assets/img/screenshots/awesome-phone.webp',
    desktopImgWebP: 'assets/img/screenshots/awesome.webp',
    technologies: ['HTML', 'CSS', 'JavaScript', 'Webpack'],
    liveVersion: 'https://romans-adi.github.io/todo-app/',
    source: 'https://github.com/romans-adi/awesome-books',
  },
  {
    id: 4,
    prName: 'ValMusic',
    description:
      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it 1960s.",
    mobileImg: 'assets/img/screenshots/valmusic-phone.jpg',
    desktopImg: 'assets/img/screenshots/valmusic.png',
    mobileImgWebP: 'assets/img/screenshots/valmusic-phone.webp',
    desktopImgWebP: 'assets/img/screenshots/valmusic.webp',
    technologies: ['HTML', 'CSS', 'JavaScript', 'PHP', 'jQuery', 'Tailwind'],
    liveVersion: 'https://valmusic.co.uk/',
    source: 'https://github.com/romans-adi/valmusic',
  },
  {
    id: 5,
    prName: 'LOL Draft 2023',
    description:
      "The project centers around a fictional event with all names, cities, and venues generated by free AI generators and/or the project author.",
    mobileImg: 'assets/img/screenshots/lol-draft-phone.png',
    desktopImg: 'assets/img/screenshots/lol-draft.png',
    mobileImgWebP: 'assets/img/screenshots/lol-draft-phone.webp',
    desktopImgWebP: 'assets/img/screenshots/lol-draft.webp',
    technologies: ['HTML', 'CSS', 'JavaScript', 'Webpack'],
    liveVersion: 'https://romans-adi.github.io/lol-draft-2023/',
    source: 'https://github.com/romans-adi/lol-draft-2023',
  },
];

// CREATING CARDS

projects.forEach((project) => {
  const card = document.createElement('div');
  card.classList = 'project-card';
  card.innerHTML = `
    <div class="project-card relative" id="${project.id}">
      <picture class="placeholder-img">
        <h3 class="project-card-heading">${project.prName}</h3>
        <source srcset="${project.mobileImgWebP}" type="image/webp" />
        <source srcset="${project.mobileImg}" type="image" />
        <img src="${project.mobileImg}" width="100%" alt="project-screenshot" class="project-screenshot project-0">
      </picture>
      <div class="project-card-content">
        <button type="button" data-modal="modal-one" class="btn-success btn-see-project btn-open">See Project</button>
      </div>
    </div>
    <div class="modal" id="modal-one">
      <button class="modal-toggle btn-close">
        <svg class="modal-close" viewBox="0 0 50 50" width="14" height="14">
           <line x1="0" y1="0" x2="50" y2="50" />
           <line x1="50" y1="0" x2="0" y2="50" />
        </svg>
      </button>
      <div class="modal-bg modal-exit"></div>
      <div class="modal-container">
        <div class="img-container">
          <img class="modal-mobile-img" src="${project.mobileImg}" alt="modal-illustration">
          <img class="modal-desktop-img"  src="${project.desktopImg}" alt="modal-illustration">
        </div>
        <div class="modal-main-layout">
          <div class="top">
            <h3 class="modal-heading blue">${project.prName}</h3>
            <ul class="tools-list">
              ${project.technologies.map(tool => `<li class="tool">${tool}</li>`).join('')}
            </ul>
          </div>
          <p>${project.description}</p>
          <div class="bottom">
            <div class="modal-btn-group">
              <a href="${project.liveVersion}" target=_blank>
                <button type="button" class="btn-success btn-success-modal see-live">See Live</button>
              </a>
              <a href="${project.source}" target=_blank>
                <button type="button" class="btn-success btn-success-modal source">See Source</button>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  container.appendChild(card);
});

// MODAL WINDOW

const projectCard = document.querySelector('.project-card');
const closeModalBtn = document.querySelector('.btn-close');
const myBody = document.body;
const modalOverlay = document.getElementById('modal-overlay');
const modals = document.querySelectorAll('[data-modal]');

modals.forEach((trigger) => {
  trigger.addEventListener('click', (event) => {
    event.preventDefault();
    const modal = document.getElementById(trigger.dataset.modal);
    modal.classList.add('open');
    modal.classList.remove('hidden');
    projectCard.className = 'project-card';
    projectCard.classList.remove('relative');
    myBody.classList.add('disable-scroll');
    modalOverlay.classList.remove('hidden');
    closeModalBtn.addEventListener('click', (event) => {
      event.preventDefault();
      modal.classList.add('hidden');
      projectCard.classList.add('relative');
      myBody.classList.remove('disable-scroll');
      modalOverlay.classList.add('hidden');
      modal.classList.remove('open');
    });
  });
});

// VALIDATION

const form = document.getElementById('contact-form');

function switchErrorColor(variable) {
  if (variable.classList.contains('transparent')) {
    variable.classList.remove('transparent');
    variable.classList.add('red');
  }
}

form.addEventListener('input', () => {
  const email = document.getElementById('email').value;
  const emailInput = document.getElementById('email');
  const regex = /^[a-z]+@[a-z0-9-]+\.[a-z]{2,3}$/g;
  if (email.match(regex)) {
    emailInput.classList.add('valid-input');
  } else {
    emailInput.classList.remove('valid-input');
  }
});

form.addEventListener('submit', (e) => {
  const errorMessage = document.querySelector('.error');
  const email = document.getElementById('email').value;
  const regex = /^[a-z]+@[a-z0-9-]+\.[a-z]{2,3}$/g;
  if (!email.match(regex)) {
    switchErrorColor(errorMessage);
    e.preventDefault();
  }
  return true;
});

const nameInput = document.querySelector('#username');
const emailInput = document.querySelector('#email');
const messageInput = document.querySelector('#message');

const formData = JSON.parse(localStorage.getItem('formData')) || {};

if (formData.name) {
  nameInput.value = formData.name;
}

if (formData.email) {
  emailInput.value = formData.email;
}

if (formData.comments) {
  messageInput.value = formData.message;
}

form.addEventListener('input', (event) => {
  formData[event.target.name] = event.target.value;
  localStorage.setItem('formData', JSON.stringify(formData));
});

const savedData = JSON.parse(localStorage.getItem('formData'));
if (savedData) {
  emailInput.value = savedData.email;
  messageInput.value = savedData.message;
  nameInput.value = savedData.username;
}

form.addEventListener('submit', () => {
  localStorage.clear();
});
